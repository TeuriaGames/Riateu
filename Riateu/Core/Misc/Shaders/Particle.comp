#version 450

struct ParitcleData
{
    vec2 position;
    vec2 velocity;
    float startLife;
    float lifeTime;
    float rotation;
    float emitting;
    vec4 startColor;
    vec4 color;
};

layout (std430, set = 0, binding = 0) restrict buffer inBuffer 
{
    ParitcleData particles[];
};

layout (set = 1, binding = 0) uniform Uniform
{
    vec2 acceleration;
    float friction;
    float spin;
    float delta;
};

vec2 moveTowards(vec2 current, vec2 target, float maxDelta)
{
    vec2 velocityDistance = target - current;
    float len = velocityDistance.length();
    return current + (velocityDistance / len * maxDelta);
}

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
void main() 
{
    ParitcleData particle = particles[gl_GlobalInvocationID.x];

    float ease = particle.lifeTime / particle.startLife;
    particle.lifeTime -= delta;
    particle.emitting = max(0, particle.lifeTime);
    particle.position += particle.velocity * delta;
    particle.velocity += acceleration * delta;
    particle.velocity = moveTowards(particle.velocity, vec2(0, 0), friction * delta);

    particle.rotation += spin * delta;

    float alpha = ease;

    particle.color *= max(0, alpha);
}